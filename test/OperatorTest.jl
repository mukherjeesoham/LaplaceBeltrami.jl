#---------------------------------------------------------------
# Construct the Laplace operator in local coordinates using 
# Spherical harmonics
# We have 1/|g| d/dx^i (|g| g^ij dœï/dx^j) 
# As an operator we write the above expression as 
#    1\|g| d/dx^i (Œ®_lm inv(Œ®_lm) S(|g|) S(gij) Œ®_lm [œï^lm])
#                       |---------------------------------|  
#                                   œï‚Ä≤_lm
#    S(1\|g|) l(l+1) Y_lm œï‚Ä≤_lm 
#    S(1\|g|) l(l+1) Y_lm inv(Œ®_lm) S(|g|) S(gij) Œ®_lm [œï^lm]
#    Œî*œï_lm = l(l+1) Ylm*œï_lm = L(l)*ùêò*œï
#
#    q: beautiful round sphere metric
#
#    L^lm''_lm = inv(Y)_ij'^lm'' |h|^ij' Y^ij'_lm' l'(l'+1) inv(Œ®)_ijb^lm' |h|^ij h^ab^ij Œ®^ija_lm
#
#    |h| = |g| / |q|
#    inv(h) = q inv(g)
#    h^ab = Œ¥^a_c q_cd g^db
#
# where S(f) is the diagonal operators for scaling
# and we've used the fact that ‚àá.(œï^lm Œ®_lm) = l(l+1) œï^lm Y_lm 
# See <R G Barrera et al 1985 Eur. J. Phys. 6 287> 
# for reference and introduction to VSH. 
#---------------------------------------------------------------
using LaplaceOnASphere, Test, LinearAlgebra

function gab(Œ∏, œï, a, b)
    if a == 1 && b == 1
        return 1
    elseif a == 2 && b == 2
        return 1/sin(Œ∏)^2
    else
        return 0
    end
end

function sqrtdetg(Œ∏, œï)
    return sin(Œ∏)
end

function L_M2N_Ylm(S)
    A = zeros(Complex, S.n*2(S.n), (S.l)^2 + 2*(S.l) + 1)
    for index in CartesianIndices(A)
        (i,j) = split(index.I[1], S.n)
        (l,m) = split(index.I[2])
        (Œ∏,œï) = grid(i,j,S.n)
        A[index] = (l*(l+1))*Ylm(l, m, Œ∏, œï)
    end
    return A
end

#---------------------------------------------------------------
# Construct Operators
#---------------------------------------------------------------

S = SphericalHarmonics(4, 8)

LŒ®lm  = M2N_Œ®lm(S)
# LSgg  = S_Œ®lm(S, (Œ∏, œï)->sqrtdetg(Œ∏,œï)*gab(Œ∏,œï,1,1), 
                 # (Œ∏, œï)->sqrtdetg(Œ∏,œï)*gab(Œ∏,œï,2,2))
# LSg   = S_Ylm(S, (Œ∏, œï)->1/sqrtdetg(Œ∏,œï))
LSgg  = S_Œ®lm(S, (Œ∏, œï)->1, 
                 (Œ∏, œï)->1)

LSg   = S_Ylm(S, (Œ∏, œï)->1)

LŒ®ÃÑlm  = N2M_Œ®lm(S)
LlYlm = L_M2N_Ylm(S)
LYÃÉlm  = N2M_Ylm(S)

Œî = LSg*LlYlm*LŒ®ÃÑlm*LSgg*LŒ®lm
Œîlm = LYÃÉlm*LSg*LlYlm*LŒ®ÃÑlm*LSgg*LŒ®lm

#---------------------------------------------------------------
# Construct functions for testing
#---------------------------------------------------------------

l  = 4
m  = 0
f  = map_to_grid(S, (Œ∏, œï)->Ylm(l,m,Œ∏,œï))
Œîf = l*(l+1)*f 

flm  = N2M_Ylm(S)*f
Œîflm = N2M_Ylm(S)*Œîf

‚àáu = map_to_grid(S, (x,y)->-(1/2)*sqrt(3/œÄ)*sin(x)^2, (x,y)->0)
‚àáulm = N2M_Œ®lm(S)*‚àáu 
‚àáuÃÑ = map_to_grid(S, (x,y)->analyticŒ®lm(S, ‚àáulm, 1, x, y),
                    (x,y)->analyticŒ®lm(S, ‚àáulm, 2, x, y))

#---------------------------------------------------------------
# Test using functions
# TODO: Test ‚àáu transformations [Done] => Œ®ÃÑlm is working?
#       But why does it disagree with Mathematica?
# TODO: Test with analytical functions for 2 and 3 modes/points
# TODO: Make the operator using only indices
#---------------------------------------------------------------

@test_broken L1(Œî*flm - Œîf) < 1e-12
@test_broken L1(Œîlm*flm - Œîflm) < 1e-12
# @test L1(real.(LSgg*LŒ®lm*flm) - ‚àáu) < 1e-12
# @test L1(‚àáu - ‚àáuÃÑ) < 1e-12

# @test L1(Œîlm*flm - (LYÃÉlm*LSg*LlYlm)*‚àáulm) < 1e-12
# @show L1(pinv(LYÃÉlm)*Œîflm - (LSg*LlYlm)*‚àáulm)
# @show L1(pinv(LYÃÉlm*LSg*LlYlm)*Œîflm - ‚àáulm)

# display(abs.(Œîlm*flm))
println("========================")
display(abs.(LYÃÉlm*Œîf))
